{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundery.js","components/CounterButton.js","components/Header.js","containers/App.js","actions.js","constants.js","reducers.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","console","log","map","users","i","key","SearchBox","searchChange","onChange","type","placeholder","Scroll","props","style","overflow","border","height","children","ErrorBoundery","state","hasError","error","info","this","setState","Component","CounterButton","updateCount","counter","nextProps","nextState","color","onClick","Header","App","onRequestRobots","searchField","onSearchChange","filteredRobots","isPending","filter","robot","toLowerCase","includes","length","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","initialStateSearch","initialStateRobots","Boolean","window","location","hostname","match","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0c5e67af.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({name, email, id}) => {\r\n\t//console.log('Card');\r\n\treturn (\r\n\t\t<div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n\t\t\t<img alt='robots' src={`https://robohash.org/${id}?200x200`}/>\r\n\t\t\t<div>\r\n\t\t\t\t<h2> {name} </h2>\r\n\t\t\t\t<p> {email} </p>\r\n\t\t\t</div>\r\n\r\n\t\t</div>\r\n\t\t);\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\n\r\n\r\nconst CardList = ({robots}) => {\r\n\t//if (true) throw new Error('Noooooooo!');\r\n\tconsole.log('CardList');\r\n\treturn (\r\n\t\t\t\t<div>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\trobots.map((users,i) => {\r\n\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t<Card \r\n\t\t\t\t\t\t\t\tkey={robots[i].id} \r\n\t\t\t\t\t\t\t\tid={robots[i].id} \r\n\t\t\t\t\t\t\t\tname={robots[i].name} \r\n\t\t\t\t\t\t\t\temail={robots[i].email} />);\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t}\r\n\t\t\t\t</div>\r\n\t);\t\t\t\r\n}\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchChange}) => {\r\n\tconsole.log('SearchBox');\r\n\treturn (\r\n\r\n\t\t<div className='pa3'>\r\n\t\t\t<input onChange={searchChange} className='pa3 ba b--green bg-lightest-blue' type='search' placeholder='search robot' />\r\n\t\t</div>\r\n\t\t);\t\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n\treturn (\r\n\t\t<div style={{ overflow:'scroll', border: '5px solid black', height: '800px' }}>\r\n\t\t \t{props.children}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Scroll;","import React, {Component} from 'react';\r\n\r\nclass ErrorBoundery extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\thasError: false,\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidCatch (error, info) {\r\n\t\tthis.setState ({hasError: true});\r\n\t}\r\n\r\n\trender() {\r\n\t\tif (this.state.hasError === true) {\r\n\t\t\treturn <h1> This is not goood! </h1>\r\n\t\t}\r\n\r\n\t\treturn this.props.children;\r\n\t}\r\n}\r\n\r\nexport default ErrorBoundery;","import React, {Component} from 'react';\r\n\r\nclass CounterButton extends Component {\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.state = {\r\n\t\t\tcounter: 0\r\n\t\t}\r\n\t}\r\n\r\n\tshouldComponentUpdate (nextProps, nextState) {\r\n\t\tif (this.state.counter !== nextState.counter) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\tupdateCount = () => {\r\n\t\tthis.setState (state => {\r\n\t\t\treturn {counter: state.counter + 1}\r\n\t\t})\r\n\t}\r\n\r\n\trender() {\r\n\t\tconsole.log('CounterButton');\r\n\t\treturn (\r\n\t\t\t\t<button color={this.props.color} onClick={this.updateCount} >\r\n\t\t\t\t\tCount: {this.state.counter}\r\n\t\t\t\t</button>\r\n\t\t\t\t);\r\n\t}\r\n\r\n}\r\n\r\nexport default CounterButton;","import React, {Component} from 'react';\r\nimport CounterButton from './CounterButton'\r\n\r\nclass Header extends Component {\r\n\r\n\tshouldComponentUpdate (nextProps, nextState) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\trender() {\r\n\t\tconsole.log('Header');\r\n\t\treturn (\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<h1 className='f1'> RoboFriends </h1>\r\n\t\t\t\t\t<CounterButton color={'red'}/>\r\n\t\t\t\t</div>\r\n\t\t\t\t)\r\n\t}\r\n\r\n}\r\n\r\nexport default Header;","import React, {Component} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundery from '../components/ErrorBoundery';\r\nimport Header from '../components/Header';\r\nimport './App.css';\r\n\r\nimport {setSearchField, requestRobots} from '../actions.js'\r\n\r\nconst mapStateToProps = state => {\r\n\treturn {\r\n\t\tsearchField: state.searchRobots.searchField,\r\n\t\trobots: state.requestRobots.robots,\r\n\t\tisPending: state.requestRobots.isPending,\r\n\t\terror: state.requestRobots.error\r\n\t};\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n\t\tonSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n\t\tonRequestRobots: () => dispatch(requestRobots())\r\n\t};\r\n}\r\n\r\nclass App extends Component {\r\n\t// constructor () {\r\n\t// \tsuper();\r\n\t// \tthis.state={\r\n\t// \t\trobots: []\r\n\t// \t}\r\n\t// }\r\n\r\n\tcomponentDidMount() {\r\n\t\tthis.props.onRequestRobots();\r\n\t\t// fetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t// .then(response => response.json())\r\n\t\t// .then(users => this.setState({robots:users}));\r\n\t}\r\n\r\n\t// onSearchChange = (event) => {\r\n\t// \tthis.setState ({ searchfield: event.target.value});\r\n\t// }\r\n\r\n\trender (){\r\n\r\n\t\t\tconst {searchField, onSearchChange, robots, isPending} = this.props;\r\n\t\t\tconst filteredRobots = robots.filter(robot => {\r\n\t\t\t\treturn robot.name.toLowerCase().includes(searchField)\r\n\t\t\t});\t\r\n\r\n\t\t\tif (robots.length === 0) {\r\n\t\t\t\treturn <h1 className='tc'> LOADING </h1>\r\n\t\t\t} else {\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<div className='tc'>\r\n\t\t\t\t\t\t<Header />\r\n\t\t\t\t\t\t<SearchBox searchChange={onSearchChange} />\r\n\t\t\t\t\t\t<Scroll>\r\n\t\t\t\t\t\t\t<ErrorBoundery>\r\n\t\t\t\t\t\t\t\t<CardList robots={filteredRobots} />\r\n\t\t\t\t\t\t\t</ErrorBoundery>\r\n\t\t\t\t\t\t</Scroll>\r\n\t\t\t\t    </div>\r\n\t\t\t\t);\r\n\t\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(App);","import {CHANGE_SEARCH_FIELD,\r\n\t\tREQUEST_ROBOTS_PENDING,\r\n\t\tREQUEST_ROBOTS_SUCCESS,\r\n\t\tREQUEST_ROBOTS_FAILED} from './constants.js';\r\n\r\nexport const setSearchField = (text) => ({\r\n\ttype: CHANGE_SEARCH_FIELD,\r\n\tpayload: text\r\n})\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n\tdispatch ({type: REQUEST_ROBOTS_PENDING});\r\n\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t.then(response => response.json())\r\n\t.then(data => dispatch ({type: REQUEST_ROBOTS_SUCCESS, payload: data}))\r\n\t.catch(error => dispatch ({type: REQUEST_ROBOTS_FAILED, payload: error}))\r\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import {CHANGE_SEARCH_FIELD,\r\n\t\tREQUEST_ROBOTS_PENDING,\r\n\t\tREQUEST_ROBOTS_SUCCESS,\r\n\t\tREQUEST_ROBOTS_FAILED} from './constants.js';\r\n\r\nconst initialStateSearch = {\r\n\tsearchField: ''\r\n}\r\n\r\nconst initialStateRobots = {\r\n\tisPending: false,\r\n\trobots: [],\r\n\terror: ''\r\n}\r\n\r\nexport const searchRobots = (state=initialStateSearch , action={}) => {\r\n\t\tswitch(action.type) {\r\n\t\t\tcase CHANGE_SEARCH_FIELD :\r\n\t\t\t\treturn Object.assign({}, state, {searchField: action.payload});\r\n\t\t\tdefault: \r\n\t\t\t\treturn state; \r\n\t\t}\r\n}\r\n\r\nexport const requestRobots = (state=initialStateRobots, action={}) => {\r\n\tswitch (action.type) {\r\n\t\tcase REQUEST_ROBOTS_PENDING:\r\n\t\t\treturn Object.assign({}, state, {isPending: true});\r\n\t\tcase REQUEST_ROBOTS_SUCCESS:\r\n\t\t\treturn Object.assign({}, state, {robots: action.payload, isPending: false});\r\n\t\tcase REQUEST_ROBOTS_FAILED:\r\n\t\t\treturn Object.assign({}, state, {error: action.payload, isPending: false});\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\nimport {createStore, applyMiddleware, combineReducers} from 'redux';\nimport {createLogger} from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App';\nimport {searchRobots, requestRobots} from './reducers.js';\nimport 'tachyons';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nconst logger=createLogger();\nconst rootReducer = combineReducers({searchRobots, requestRobots});\n\nconst store=createStore(rootReducer, applyMiddleware(thunkMiddleware));//, logger\n\nReactDOM.render(<Provider store={store} >\n\t\t\t\t\t<App />\n\t\t\t\t</Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}